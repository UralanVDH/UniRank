{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UralanVDH/UniRank/blob/master/UniRank\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "BijEWNu9YxbP",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Importing relevant libraries\n",
        "\n",
        "import csv\n",
        "from google.colab import drive\n",
        "from google.colab import files\n",
        "drive.mount('/content/drive')\n",
        "import re\n",
        "import time\n",
        "!pip install -q fuzzywuzzy\n",
        "!pip install -q python-Levenshtein\n",
        "import fuzzywuzzy\n",
        "import Levenshtein\n",
        "from fuzzywuzzy import fuzz\n",
        "from fuzzywuzzy import process\n",
        "\n",
        "# opening relevant files +++++++++++++++++++++++++++\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/Wall-E - Export UNI TN.csv\", encoding = \"ISO-8859-1\") as f:\n",
        "        reader = csv.reader(f, delimiter=';')\n",
        "        data = [r for r in reader]\n",
        "flat_data = [item for sublist in data for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/QS World Ranking 500.csv\", encoding = \"ISO-8859-1\") as g:\n",
        "    reader1 = csv.reader(g)\n",
        "    data1 = [r for r in reader1]\n",
        "flat_data1 = [item for sublist in data1 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/QS-2018-ASIA.csv\", encoding = \"ISO-8859-1\") as h:\n",
        "    reader2 = csv.reader(h)\n",
        "    data2 = [r for r in reader2]\n",
        "flat_data2 = [item for sublist in data2 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/QS-2018-ARAB.csv\", encoding = \"ISO-8859-1\") as i:\n",
        "    reader3 = csv.reader(i)\n",
        "    data3 = [r for r in reader3]\n",
        "flat_data3 = [item for sublist in data3 for item in sublist]\n",
        "        \n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/QS-2018-EESA.csv\", encoding = \"ISO-8859-1\") as j:\n",
        "    reader4 = csv.reader(j)\n",
        "    data4 = [r for r in reader4]\n",
        "flat_data4 = [item for sublist in data4 for item in sublist]\n",
        "        \n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/QS-2018-LATIN.csv\", encoding = \"ISO-8859-1\") as k:\n",
        "    reader5 = csv.reader(k)\n",
        "    data5 = [r for r in reader5]\n",
        "flat_data5 = [item for sublist in data5 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/QS-2018-BRICS.csv\", encoding = \"ISO-8859-1\") as l:\n",
        "    reader6 = csv.reader(l)\n",
        "    data6 = [r for r in reader6]\n",
        "flat_data6 = [item for sublist in data6 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/THE_Ranking_World_500.csv\", encoding = \"ISO-8859-1\") as m:\n",
        "    reader7 = csv.reader(m)\n",
        "    data7 = [r for r in reader7]\n",
        "flat_data7 = [item for sublist in data7 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/THE_Ranking_Asia.csv\", encoding = \"ISO-8859-1\") as n:\n",
        "    reader8 = csv.reader(n)\n",
        "    data8 = [r for r in reader8]\n",
        "flat_data8 = [item for sublist in data8 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/THE_Ranking_Latin.csv\", encoding = \"ISO-8859-1\") as o:\n",
        "    reader9 = csv.reader(o)\n",
        "    data9 = [r for r in reader9]\n",
        "flat_data9 = [item for sublist in data9 for item in sublist]\n",
        "\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/Sandeep_A_List.csv\", encoding = \"ISO-8859-1\") as p:\n",
        "        reader10 = csv.reader(p)\n",
        "        data10 = [r for r in reader10]\n",
        "flat_data10 = [item for sublist in data10 for item in sublist]\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/Sandeep_B_List.csv\", encoding = \"ISO-8859-1\") as q:\n",
        "        reader11 = csv.reader(q)\n",
        "        data11 = [r for r in reader11]\n",
        "flat_data11 = [item for sublist in data11 for item in sublist]\n",
        "with open(\"/content/drive/My Drive/Colab Notebooks/Sandeep_C_List.csv\", encoding = \"ISO-8859-1\") as r:\n",
        "        reader12 = csv.reader(r)\n",
        "        data12 = [r for r in reader12]      \n",
        "flat_data12 = [item for sublist in data12 for item in sublist]\n",
        "\n",
        "start_time = time.clock()\n",
        "filename = \"/content/drive/My Drive/Colab Notebooks/Uni_scores\" + str(time.clock()) + \".csv\"\n",
        "\n",
        "# Cleaning lists +++++++++++++++++++++++++++++++++++\n",
        "\n",
        "unwanted = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \".\", \"=\", \" A \", \" B \",\" XL \", \" HI \", \"'\", \",\", \"-\", \"  \", \"FC\", \" HI \", \" L \", \"SFO\", \" L  \", \" LO \", \"(\", \")\", \"\\\\\", \" A \", \"xc\", \" C \", \"LHI\", \"MHI\", \"MD\", \" MD \", \"LFO\", \" M \", \"VH\", \" CO \", \"LFC\", \"LCO\", \" LCO \", \" FO \", \" A \", \"+\", \"Ã¢\",]\n",
        "input_char = \"\"\n",
        "\n",
        "\n",
        "data1_new = []\n",
        "for i in range(len(data1)):\n",
        "    del data1[i][1:]\n",
        "\n",
        "flat_data1 = [item for sublist in data1 for item in sublist]\n",
        "#print(flat_data1)\n",
        "\n",
        "flat_data2_new = []\n",
        "\n",
        "for i in range(len(flat_data2)):\n",
        "    s = flat_data2[i]\n",
        "def replaceMultiple(s, unwanted, input_char):\n",
        "    # Iterate over the strings to be replaced\n",
        "    for elem in unwanted:\n",
        "        # Replace the string, does not do anything if `elem` not in `s`\n",
        "        s = s.replace(elem, input_char)\n",
        "    return s\n",
        "\n",
        "flat_data2_new = [replaceMultiple(x, unwanted, input_char) for x in flat_data2]\n",
        "\n",
        "\n",
        "flat_data3_new = []\n",
        "\n",
        "for i in range(len(flat_data3)):\n",
        "    s = flat_data3[i]\n",
        "def replaceMultiple(s, unwanted, input_char):\n",
        "    # Iterate over the strings to be replaced\n",
        "    for elem in unwanted:\n",
        "        # Replace the string, does not do anything if `elem` not in `s`\n",
        "        s = s.replace(elem, input_char)\n",
        "    return s\n",
        "\n",
        "flat_data3_new = [replaceMultiple(x, unwanted, input_char) for x in flat_data3]\n",
        "\n",
        "\n",
        "flat_data4_new = []\n",
        "\n",
        "for i in range(len(flat_data4)):\n",
        "    s = flat_data4[i]\n",
        "def replaceMultiple(s, unwanted, input_char):\n",
        "    # Iterate over the strings to be replaced\n",
        "    for elem in unwanted:\n",
        "        # Replace the string, does not do anything if `elem` not in `s`\n",
        "        s = s.replace(elem, input_char)\n",
        "    return s\n",
        "\n",
        "flat_data4_new = [replaceMultiple(x, unwanted, input_char) for x in flat_data4]\n",
        "\n",
        "\n",
        "flat_data5_new = []\n",
        "\n",
        "for i in range(len(flat_data5)):\n",
        "    s = flat_data5[i]\n",
        "def replaceMultiple(s, unwanted, input_char):\n",
        "    # Iterate over the strings to be replaced\n",
        "    for elem in unwanted:\n",
        "        # Replace the string, does not do anything if `elem` not in `s`\n",
        "        s = s.replace(elem, input_char)\n",
        "    return s\n",
        "\n",
        "flat_data5_new = [replaceMultiple(x, unwanted, input_char) for x in flat_data5]\n",
        "\n",
        "\n",
        "flat_data6_new = []\n",
        "\n",
        "for i in range(len(flat_data6)):\n",
        "    s = flat_data6[i]\n",
        "def replaceMultiple(s, unwanted, input_char):\n",
        "    # Iterate over the strings to be replaced\n",
        "    for elem in unwanted:\n",
        "        # Replace the string, does not do anything if `elem` not in `s`\n",
        "        s = s.replace(elem, input_char)\n",
        "    return s\n",
        "\n",
        "flat_data6_new = [replaceMultiple(x, unwanted, input_char) for x in flat_data6]\n",
        "\n",
        "\n",
        "print(\" ++++++++++++++++++++++++++++++++++++++++++++\")\n",
        "\n",
        "\n",
        "#Testing if I can return all 3175 entries - Yes +++++++++++++++++++++++\n",
        "\n",
        "#big_list = flat_data2_new + flat_data3_new + flat_data4_new + flat_data5_new + flat_data6_new + data10 + data11 + data12 + data7 + data8 + data9 + data1\n",
        "#scored_testdata = []\n",
        "#for uni in data:\n",
        "#    hit = process.extractOne(str(uni[1]), big_list, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "#    scored_testdata.append(hit)\n",
        "#print(len(scored_testdata))\n",
        "\n",
        "\n",
        "\n",
        "#Going through all lists with try except statements and if statements, returns only 2854 entries +++++++++++++++++\n",
        "\n",
        "for uni in data:\n",
        "    hit = process.extractOne(str(uni[1]), data10, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "    try:\n",
        "        if float(hit[1]) >= 94:\n",
        "            with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit), 'points': 10})\n",
        "            \n",
        "    except:\n",
        "        hit1 = process.extractOne(str(uni[1]), data11, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "        try:\n",
        "            if float(hit1[1]) >= 94:\n",
        "                with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                    fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                    writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                    writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit1), 'points': 5})\n",
        "                \n",
        "        except:\n",
        "            hit2 = process.extractOne(str(uni[1]), data12, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "            try:\n",
        "                if float(hit2[1]) >= 94:\n",
        "                    with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                        fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                        writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit2), 'points': 3})\n",
        "                    \n",
        "            except:\n",
        "                hit3 = process.extractOne(str(uni[1]), data1, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                try:\n",
        "                    if float(hit3[1]) >= 94:\n",
        "                        with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                            fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                            writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit3), 'points': 10})\n",
        "                except:\n",
        "                    hit4 = process.extractOne(str(uni[1]), data7, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                    try:\n",
        "                        if float(hit4[1]) >= 94:\n",
        "                            with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit4), 'points': 10})\n",
        "                    except:\n",
        "                        hit5 = process.extractOne(str(uni[1]), flat_data2_new, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                        try:\n",
        "                            if float(hit5[1]) >= 94:\n",
        "                                with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                    fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                    writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                    writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit5), 'points': 5})\n",
        "                        except:\n",
        "                            hit6 = process.extractOne(str(uni[1]), flat_data3_new, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                            try:\n",
        "                                if float(hit6[1]) >= 94:\n",
        "                                    with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                        fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                        writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit6), 'points': 5})\n",
        "                            except:\n",
        "                                hit7 = process.extractOne(str(uni[1]), flat_data4_new, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                                try:\n",
        "                                    if float(hit7[1]) >= 94:\n",
        "                                        with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                            fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                            writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit7), 'points': 5})\n",
        "                                except:\n",
        "                                    hit8 = process.extractOne(str(uni[1]), flat_data5_new, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                                    try:\n",
        "                                        if float(hit8[1]) >= 94:\n",
        "                                            with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                                fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                                writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                                writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit8), 'points': 5})\n",
        "                                    except:\n",
        "                                        hit9 = process.extractOne(str(uni[1]), flat_data6_new, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                                        try:\n",
        "                                            if float(hit9[1]) >= 94:\n",
        "                                                with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                                    fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                                    writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                                    writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit9), 'points': 5})\n",
        "                                        except:\n",
        "                                            hit10 = process.extractOne(str(uni[1]), data8, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                                            try:\n",
        "                                                if float(hit10[1]) >= 94:\n",
        "                                                    with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                                        fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                                        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                                        writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit10), 'points': 5})\n",
        "                                                        \n",
        "                                            except:\n",
        "                                                hit11 = process.extractOne(str(uni[1]), data9, scorer = fuzz.token_set_ratio, score_cutoff = 90)\n",
        "                                                try:\n",
        "                                                    if float(hit11[1]) >= 94:\n",
        "                                                        with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                                            fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                                            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                                            writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': str(hit11), 'points': 5})\n",
        "                                                except:\n",
        "                                                    hit12 = process.extractOne(str(uni[1]), data9, scorer = fuzz.token_set_ratio)\n",
        "                                                    try:\n",
        "                                                        if float(hit12[1]) < 94:\n",
        "                                                            with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                                                fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                                                writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                                                writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': \"CHECK AGAIN \" + str(hit12), 'points': 3})\n",
        "                                                    except:\n",
        "                                                        with open(filename, mode='a', newline=\"\") as csv_file:\n",
        "                                                                fieldnames = ['bwbnr', 'uni_name', 'match', 'points']\n",
        "                                                                writer = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=';')\n",
        "                                                                writer.writerow({'bwbnr': str(uni[0]), 'uni_name': str(uni[1]), 'match': \"no match found\", 'points': 3})\n",
        "files.download(filename)"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}